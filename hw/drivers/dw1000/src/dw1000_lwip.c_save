/**
 * Copyright 2017-2018, Decawave Limited, All Rights Reserved
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <os/os.h>
#include <hal/hal_spi.h>
#include <hal/hal_gpio.h>
#include "bsp/bsp.h"

#include <dw1000/dw1000_regs.h>
#include <dw1000/dw1000_dev.h>
#include <dw1000/dw1000_hal.h>
#include <dw1000/dw1000_mac.h>
#include <dw1000/dw1000_ftypes.h>
#include <dw1000/dw1000_lwip.h>

static void rx_complete_cb(dw1000_dev_instance_t * inst);
static void tx_complete_cb(dw1000_dev_instance_t * inst);
static void rx_timeout_cb(dw1000_dev_instance_t * inst);
static void rx_error_cb(dw1000_dev_instance_t * inst);

static const dwt_config_t dev_config = {
    .chan = 5,                          /* Channel number. */
    .prf = DWT_PRF_64M,                 /* Pulse repetition frequency. */
    .txPreambLength = DWT_PLEN_128,     /* Preamble length. Used in TX only. */
    .rxPAC = DWT_PAC8,                  /* Preamble acquisition chunk size. Used in RX only. */
    .txCode = 9,                        /* TX preamble code. Used in TX only. */
    .rxCode = 9,                        /* RX preamble code. Used in RX only. */
    .nsSFD = 0,                         /* 0 to use standard SFD, 1 to use non-standard SFD. */
    .dataRate = DWT_BR_6M8,             /* Data rate. */
    .phrMode = DWT_PHRMODE_STD,         /* PHY header mode. */
    .sfdTO = (129 + 8 - 8)             /* SFD timeout (preamble length + 1 + SFD length - PAC size). Used in RX only. */
};


static const dw1000_lwip_config_t lwip_config = {
    .poll_resp_delay = 140,    // Delay between frames, in UWB microseconds.
    .resp_timeout = 210,       // Receive response timeout, in UWB microseconds.
    .uwbtime_to_systime = 65536
};


dw1000_lwip_instance_t * dw1000_lwip_init(dw1000_dev_instance_t * inst, dw1000_lwip_config_t * config){

    dw1000_lwip_instance_t * lwip = inst->lwip;
    assert(inst);
    if (lwip == NULL ){
        lwip = inst->lwip  = (dw1000_lwip_instance_t *) malloc(sizeof(dw1000_lwip_instance_t));
        assert(lwip);
        memset(lwip,0,sizeof(dw1000_lwip_instance_t));
        lwip->status.selfmalloc = 1;
    }

    os_error_t err = os_sem_init(&lwip->sem, 0xFFFF); 
    assert(err == OS_OK);

    memcpy(&lwip->tx_frame, &tx_frame, sizeof(ieee_std_frame_t));
    memcpy(&lwip->rx_frame, &rx_frame, sizeof(ieee_std_frame_t));

    if (config == NULL)
        memcpy(&lwip->config, &lwip_config, sizeof(dw1000_lwip_config_t));
    else
        memcpy(&lwip->config, config, sizeof(dw1000_lwip_config_t));

    dw1000_set_rxtx_delay(inst, lwip->config.poll_resp_delay);
    dw1000_set_rx_timeout(inst, lwip->config.resp_timeout);

    dw1000_lwip_set_callbacks(inst->lwip, tx_complete_cb, rx_complete_cb, rx_timeout_cb, rx_error_cb);

    lwip->status.initialized = 1;

    return lwip;
}


void dw1000_lwip_free(dw1000_lwip_instance_t * inst){

    assert(inst);  
    if (inst->status.selfmalloc)
        free(inst);
    else
        inst->status.initialized = 0;
}

void dw1000_lwip_set_callbacks(dw1000_lwip_instance_t * inst, dw1000_dev_cb_t tx_complete_cb, dw1000_dev_cb_t rx_complete_cb,  dw1000_dev_cb_t rx_timeout_cb,  dw1000_dev_cb_t rx_error_cb)
{
    inst->dev->tx_complete_cb = tx_complete_cb;
    inst->dev->rx_complete_cb = rx_complete_cb;
    inst->dev->rx_timeout_cb = rx_timeout_cb;
    inst->dev->rx_error_cb = rx_error_cb;
}

dw1000_lwip_status_t dw1000_lwip_write(dw1000_lwip_instance_t * inst, dw1000_lwip_config_t * rng_config, dw1000_lwip_modes_t mode){

    dw1000_dev_instance_t * dev = inst->dev; 

    /* Semaphore lock for multi-threaded applications */
    os_error_t err = os_sem_pend(&inst->sem, OS_TIMEOUT_NEVER);
    assert(err == OS_OK);

    inst->tx_frame.seq_num++;
    inst->tx_frame.code = mode;
    dw1000_write_tx(dev, (uint8_t *)&tx_frame, 0, sizeof(ieee_rng_tx_frame_t));
    dw1000_write_tx_fctrl(dev, sizeof(ieee_rng_tx_frame_t), 0, 1); /* Zero offset in TX buffer, no ranging. */
    dw1000_start_tx(dev, DWT_START_RX_DELAYED | DWT_RESPONSE_EXPECTED);

    return inst->status;
}





static void rx_complete_cb(dw1000_dev_instance_t * inst){

    dw1000_lwip_instance_t * lwip = (dw1000_lwip_instance_t * ) inst->lwip;

    hal_gpio_toggle(LED_1);

    ieee_rng_tx_frame_t tx_frame={0};
    if (inst->frame_len <= sizeof(ieee_rng_tx_frame_t))
        dw1000_read_rx(inst,  (uint8_t *) &tx_frame, 0, inst->frame_len);
    
    printf("seq_num=%d len = %d\n",rx_frame.seq_num, inst->frame_len);

#if 0
    switch (poll_frame.code){
        case DW1000_SS_TWR:
            rng->rx_resp_frame.reception_timestamp = dw1000_read_txtime_lo(inst);
            rng->rx_resp_frame.transmission_timestamp = dw1000_read_rxtime_lo(inst);
            dw1000_write_tx(inst, (uint8_t *)&rx_resp_frame, 0, sizeof(ieee_rng_rx_frame_t));
            dw1000_write_tx_fctrl(inst, sizeof(ieee_rng_rx_frame_t), 0, 1); /* Zero offset in TX buffer, no ranging. */
            dw1000_start_tx(inst, DWT_START_RX_DELAYED | DWT_RESPONSE_EXPECTED);
            break;
        default: break;
    }
#endif

    os_error_t err = os_sem_release(&lwip->sem);
    assert(err == OS_OK);
}

static void tx_complete_cb(dw1000_dev_instance_t * inst){

    dw1000_lwip_instance_t * lwip = (dw1000_lwip_instance_t * ) inst->lwip;
    printf("lwip_comlete_cb");

    os_error_t err = os_sem_release(&lwip->sem);
    assert(err == OS_OK);
}

static void rx_timeout_cb(dw1000_dev_instance_t * inst){

    dw1000_lwip_instance_t * lwip = (dw1000_lwip_instance_t * ) inst->lwip;
    printf("lwip_timeout_cb");

    os_error_t err = os_sem_release(&lwip->sem);
    assert(err == OS_OK);

}

static void rx_error_cb(dw1000_dev_instance_t * inst){

    dw1000_lwip_instance_t * lwip = (dw1000_lwip_instance_t * ) inst->lwip;
    printf("lwip_error_cb");
   
    os_error_t err = os_sem_release(&lwip->sem);
    assert(err == OS_OK);

}
